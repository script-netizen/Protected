-- Define variables
local Noclip = false
local AttNoclip = nil
local InfiniteJump = false
local desiredClientSpeed = 16 -- Default speed
local player = game:GetService('Players').LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local originalWalkSpeed = humanoid.WalkSpeed

-- Load Rayfield library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create the main window
local Window = Rayfield:CreateWindow({
    Name = "Gyro",
    Icon = "rewind", -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Made by Youtuber SaucePan-0",
    LoadingSubtitle = "Obfuscated by MoonSec v3.",
    Theme = "DarkBlue", -- Check https://docs.sirius.menu/rayfield/configuration/themes

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil, -- Create a custom folder for your hub/game
        FileName = "Big Hub"
    },

    Discord = {
        Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
        Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
        RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },

    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
        Title = "Key System",
        Subtitle = "Join Discord for key!",
        Note = "plz do join tho", -- Use this to tell the user how to get a key
        FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
        SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
        GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
        Key = {"no discord yet"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
})

-- Create a tab and section
local Tab = Window:CreateTab("Main", "anvil")
local Section = Tab:CreateSection("Universal")

-- Create a button
local Button = Tab:CreateButton({
    Name = "Anti Chat Logger",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/AnthonyIsntHere/anthonysrepository/main/scripts/AntiChatLogger.lua", true))()
        Menu:Notify({
            Title = "Executed Script!",
            Content = "Anti Chat Logger",
            Duration = 3,
            Image = 4483362458,
        })
    end,
})

-- Create a toggle for noclip
local NoclipToggle = Tab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "NoclipToggle",
    Callback = function(Value)
        Noclip = Value
        if Noclip then
            if AttNoclip then
                AttNoclip:Disconnect()
            end
            AttNoclip = game:GetService('RunService').Stepped:Connect(function()
                if game.Players.LocalPlayer.Character then
                    for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                        if v:IsA('BasePart') then
                            v.CanCollide = false
                        end
                    end
                end
            end)
        else
            if AttNoclip then
                AttNoclip:Disconnect()
                AttNoclip = nil
            end
        end
    end,
})

-- Create a toggle for infinite jump
local InfiniteJumpConnection = nil

local InfiniteJumpToggle = Tab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJumpToggle",
    Callback = function(Value)
        InfiniteJump = Value
        if InfiniteJump then
            InfiniteJumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
                if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
                    game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                end
            end)
        else
            if InfiniteJumpConnection then
                InfiniteJumpConnection:Disconnect()
                InfiniteJumpConnection = nil
            end
        end
    end,
})

local function updateSpeed()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = desiredClientSpeed
    end
end

-- Create a proxy table to intercept WalkSpeed changes
local walkSpeedProxy = {}
local walkSpeedMetatable = {
    __index = function(_, key)
        if key == "WalkSpeed" then
            return desiredClientSpeed -- Return the desired client speed
        else
            return humanoid[key] -- Return other properties normally
        end
    end,
    __newindex = function(_, key, value)
        if key == "WalkSpeed" then
            -- If the new value is not the desired speed, ignore it
            if value ~= desiredClientSpeed then
                humanoid.WalkSpeed = desiredClientSpeed
            else
                humanoid.WalkSpeed = value
            end
        else
            humanoid[key] = value -- Allow other properties to be set normally
        end
    end
}

-- Apply the metatable to the proxy table
setmetatable(walkSpeedProxy, walkSpeedMetatable)

-- Replace the humanoid's WalkSpeed with the proxy table
humanoid.WalkSpeed = walkSpeedProxy.WalkSpeed

-- Listen for changes to the WalkSpeed property
humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
    -- Ensure the client-side speed remains at the desired value
    if humanoid.WalkSpeed ~= desiredClientSpeed then
        humanoid.WalkSpeed = desiredClientSpeed
    end
end)

-- Listen for character changes (e.g., respawn)
player.CharacterAdded:Connect(function()
    updateSpeed()
end)

-- Create a slider for speed manipulation
local SpeedSlider = Tab:CreateSlider({
    Name = "Speed v2",
    Range = {0, 100},
    Increment = 1,
    Suffix = " studs/s",
    CurrentValue = desiredClientSpeed,
    Flag = "SpeedSlider", -- Unique flag for configuration saving
    Callback = function(Value)
        desiredClientSpeed = Value
        updateSpeed()
    end,
})

-- Click-to-Teleport Tool
local ClickToTpButton = Tab:CreateButton({
    Name = "Click to Teleport Tool",
    Callback = function()
        local tool = Instance.new("Tool")
        tool.Name = "TP"
        tool.RequiresHandle = false
        tool.Parent = player.Backpack

        tool.Activated:Connect(function()
            local target = player:GetMouse().Hit.Position
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(target)
            end
        end)

        Menu:Notify({
            Title = "Tool Added!",
            Content = "Click to Teleport Tool has been added to your backpack.",
            Duration = 3,
            Image = 4483362458,
        })
    end,
})

local Tab = Window:CreateTab("Universal Bypasses", "apple")

local Section = Tab:CreateSection("UNSAFE")

local Button = Tab:CreateButton({
	Name = "Universal Bypass #1 ",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/Next1x/Nextix./main/UniversalACBypass"))()
	end,
})
